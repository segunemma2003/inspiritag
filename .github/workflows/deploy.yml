name: Deploy to VPS

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          script: |
            set -e  # Exit on any error

            # Navigate to project directory
            cd /var/www/inspirtag

            # FORCE reset to GitHub version (prevents merge conflicts)
            echo "🔄 Pulling latest changes..."
            git fetch origin
            git reset --hard origin/main
            git clean -fd

            # Make scripts executable if they exist
            chmod +x docker/entrypoint.sh 2>/dev/null || true

            # Check if Docker is running
            if ! docker info > /dev/null 2>&1; then
              echo "🐳 Starting Docker..."
              sudo systemctl start docker
              sleep 5
            fi

            # Add missing .env variables if not present
            echo "🔧 Ensuring .env has required variables..."
            grep -q "AWS_URL=" .env || echo "AWS_URL=" >> .env
            grep -q "AWS_ENDPOINT=" .env || echo "AWS_ENDPOINT=" >> .env
            grep -q "AWS_USE_PATH_STYLE_ENDPOINT=" .env || echo "AWS_USE_PATH_STYLE_ENDPOINT=false" >> .env

            # Update DB_HOST to use host MySQL (not Docker MySQL)
            sed -i 's/^DB_HOST=.*/DB_HOST=host.docker.internal/' .env

            # Backup .env file
            echo "💾 Backing up .env file..."
            cp .env .env.backup

            # Complete shutdown - remove everything
            echo "🛑 Stopping all containers..."
            docker-compose down --remove-orphans --timeout 10 || true

            # Force remove any stuck containers
            echo "🧹 Cleaning up stuck containers..."
            docker ps -aq | xargs -r docker rm -f 2>/dev/null || true

            # Prune everything
            docker container prune -f
            docker network prune -f

            # Restore .env file
            echo "📋 Restoring .env file..."
            cp .env.backup .env

            # Always rebuild to ensure latest code
            echo "🔨 Building containers..."
            docker-compose build --no-cache

            # Start all containers fresh
            echo "🚀 Starting containers..."
            docker-compose up -d --force-recreate

            # Wait for services to be ready
            echo "⏳ Waiting for services to start..."
            sleep 15

            # Check if app container is running
            echo "🔍 Checking app container..."
            if ! docker-compose ps app | grep -q "Up"; then
              echo "❌ App container is not running"
              docker-compose logs app
              exit 1
            fi

            # Clear all Laravel caches
            echo "🧹 Clearing Laravel caches..."
            docker-compose exec -T app php artisan config:clear || true
            docker-compose exec -T app php artisan route:clear || true
            docker-compose exec -T app php artisan cache:clear || true
            docker-compose exec -T app php artisan view:clear || true
            docker-compose exec -T app rm -rf bootstrap/cache/*.php || true

            # Run migrations
            echo "🗄️ Running migrations..."
            docker-compose exec -T app php artisan migrate --force || {
              echo "⚠️ Migrations failed, continuing..."
            }

            # Cache configuration
            echo "📦 Caching configuration..."
            docker-compose exec -T app php artisan config:cache
            docker-compose exec -T app php artisan route:cache
            docker-compose exec -T app php artisan view:cache

            # Restart queue workers
            echo "🔄 Restarting queue workers..."
            docker-compose exec -T app php artisan queue:restart || true

            # Health check
            echo "🏥 Health check..."
            sleep 5

            if curl -f http://localhost/health > /dev/null 2>&1; then
              echo "✅ Deployment successful!"
            else
              echo "⚠️ Health check failed, checking logs..."
              docker-compose ps
              docker-compose logs --tail=50 app
              echo "Continuing anyway..."
            fi

            # Test API
            echo "🧪 Testing API..."
            curl -f http://localhost/api/categories 2>/dev/null || echo "⚠️ API test skipped"

            # Final container status
            echo "📊 Final container status:"
            docker-compose ps

            echo "🎉 Deployment completed!"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi
