name: Deploy to VPS

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          script: |
            # Navigate to project directory
            cd /var/www/inspirtag

            # Pull latest changes
            echo "🔄 Pulling latest changes..."
            git pull origin main

            # Make scripts executable
            chmod +x fix_server_docker.sh
            chmod +x ensure_containers_running.sh
            chmod +x docker/entrypoint.sh

            # Check if Docker is running
            if ! docker info > /dev/null 2>&1; then
              echo "🐳 Starting Docker..."
              sudo systemctl start docker
              sleep 5
            fi

            # Backup .env file (important!)
            echo "💾 Backing up .env file..."
            cp .env .env.backup

            # Stop containers gracefully
            echo "🛑 Stopping containers..."
            docker-compose down --timeout 30

            # Restore .env file
            echo "📋 Restoring .env file..."
            cp .env.backup .env

            # Build containers (only rebuild if Dockerfile changed)
            if git diff HEAD~1 HEAD --name-only | grep -E "(Dockerfile|docker/)" > /dev/null; then
              echo "🔨 Rebuilding containers (Docker files changed)..."
              docker-compose build --no-cache
            else
              echo "⏭️ Skipping rebuild (no Docker changes)"
            fi

            # Start containers
            echo "🚀 Starting containers..."
            docker-compose up -d

            # Wait for MySQL to be healthy
            echo "⏳ Waiting for MySQL..."
            timeout 60 bash -c 'until docker-compose exec -T mysql mysqladmin ping -h localhost --silent; do sleep 2; done' || {
              echo "❌ MySQL failed to start"
              docker-compose logs mysql
              exit 1
            }

            # Clear all Laravel caches inside container
            echo "🧹 Clearing Laravel caches..."
            docker-compose exec -T app php artisan config:clear
            docker-compose exec -T app php artisan route:clear
            docker-compose exec -T app php artisan cache:clear
            docker-compose exec -T app php artisan view:clear
            docker-compose exec -T app rm -rf bootstrap/cache/*.php

            # Run migrations
            echo "🗄️ Running migrations..."
            docker-compose exec -T app php artisan migrate --force

            # Cache configuration (AFTER migrations)
            echo "📦 Caching configuration..."
            docker-compose exec -T app php artisan config:cache
            docker-compose exec -T app php artisan route:cache
            docker-compose exec -T app php artisan view:cache

            # Restart queue workers
            echo "🔄 Restarting queue workers..."
            docker-compose exec -T app php artisan queue:restart

            # Health check
            echo "🏥 Health check..."
            sleep 10

            if curl -f http://localhost/health > /dev/null 2>&1; then
              echo "✅ Deployment successful!"
            else
              echo "❌ Health check failed"
              docker-compose logs app
              exit 1
            fi

            # Test API
            echo "🧪 Testing API..."
            curl -f http://localhost/api/categories || echo "⚠️ API test failed"

            # Container status
            echo "📊 Container status:"
            docker-compose ps

            echo "🎉 Deployment completed!"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi
