<?php
// create_test_image.php - Utility to create test images for upload testing

/**
 * Create a test image for upload testing
 *
 * @param int $width Image width
 * @param int $height Image height
 * @param string $outputPath Output file path
 * @param string $text Text to display on image
 * @return bool Success status
 */
function createTestImage($width = 800, $height = 600, $outputPath = null, $text = null) {
    if (!extension_loaded('gd')) {
        echo "❌ GD extension is not loaded. Cannot create image.\n";
        return false;
    }

    if (!$outputPath) {
        $outputPath = sys_get_temp_dir() . '/test_image_' . time() . '.jpg';
    }

    if (!$text) {
        $text = 'Test Image - ' . date('Y-m-d H:i:s');
    }

    // Create image
    $image = imagecreate($width, $height);

    // Define colors
    $colors = [
        'bg' => imagecolorallocate($image, 135, 206, 235), // Sky blue
        'text' => imagecolorallocate($image, 255, 255, 255), // White
        'border' => imagecolorallocate($image, 0, 0, 0), // Black
        'accent' => imagecolorallocate($image, 255, 165, 0), // Orange
    ];

    // Draw border
    imagerectangle($image, 0, 0, $width-1, $height-1, $colors['border']);

    // Draw some decorative elements
    $centerX = $width / 2;
    $centerY = $height / 2;

    // Draw circles for decoration
    for ($i = 0; $i < 3; $i++) {
        $radius = 20 + ($i * 15);
        $color = $i % 2 === 0 ? $colors['accent'] : $colors['text'];
        imagefilledellipse($image, $centerX + ($i * 60) - 60, $centerY + 100, $radius, $radius, $color);
    }

    // Add main text
    imagestring($image, 5, $centerX - 100, $centerY - 50, $text, $colors['text']);

    // Add subtitle
    imagestring($image, 3, $centerX - 120, $centerY - 10, 'Presigned Upload Test', $colors['text']);

    // Add timestamp
    imagestring($image, 2, $centerX - 100, $centerY + 30, date('Y-m-d H:i:s'), $colors['text']);

    // Add file info
    imagestring($image, 2, 10, $height - 30, "Size: {$width}x{$height}px", $colors['text']);
    imagestring($image, 2, 10, $height - 15, "Generated by create_test_image.php", $colors['text']);

    // Save image
    $result = imagejpeg($image, $outputPath, 90);
    imagedestroy($image);

    if ($result) {
        echo "✅ Test image created: $outputPath\n";
        echo "   Size: {$width}x{$height}px\n";
        echo "   File size: " . formatBytes(filesize($outputPath)) . "\n";
        return true;
    } else {
        echo "❌ Failed to create test image\n";
        return false;
    }
}

/**
 * Create a test video file (fake content)
 *
 * @param string $outputPath Output file path
 * @param int $sizeInMB Size in MB
 * @return bool Success status
 */
function createTestVideo($outputPath = null, $sizeInMB = 1) {
    if (!$outputPath) {
        $outputPath = sys_get_temp_dir() . '/test_video_' . time() . '.mp4';
    }

    $sizeInBytes = $sizeInMB * 1024 * 1024;

    // Create fake video content
    $content = "FAKE MP4 VIDEO CONTENT FOR TESTING\n";
    $content .= "Created: " . date('Y-m-d H:i:s') . "\n";
    $content .= "Size: " . formatBytes($sizeInBytes) . "\n";
    $content .= str_repeat("Video chunk data - ", 1000) . "\n";

    // Pad to desired size
    while (strlen($content) < $sizeInBytes) {
        $content .= str_repeat("x", min(1024, $sizeInBytes - strlen($content)));
    }

    $result = file_put_contents($outputPath, $content);

    if ($result !== false) {
        echo "✅ Test video created: $outputPath\n";
        echo "   Size: " . formatBytes(filesize($outputPath)) . "\n";
        return true;
    } else {
        echo "❌ Failed to create test video\n";
        return false;
    }
}

/**
 * Format bytes to human readable format
 *
 * @param int $bytes
 * @param int $precision
 * @return string
 */
function formatBytes($bytes, $precision = 2) {
    $units = ['B', 'KB', 'MB', 'GB', 'TB'];

    for ($i = 0; $bytes > 1024 && $i < count($units) - 1; $i++) {
        $bytes /= 1024;
    }

    return round($bytes, $precision) . ' ' . $units[$i];
}

/**
 * Create multiple test files
 */
function createMultipleTestFiles() {
    echo "🎨 Creating multiple test files...\n";
    echo "=====================================\n";

    $files = [];

    // Small image
    $files[] = createTestImage(400, 300, sys_get_temp_dir() . '/test_image_small.jpg', 'Small Image');

    // Medium image
    $files[] = createTestImage(800, 600, sys_get_temp_dir() . '/test_image_medium.jpg', 'Medium Image');

    // Large image
    $files[] = createTestImage(1920, 1080, sys_get_temp_dir() . '/test_image_large.jpg', 'Large Image');

    // Small video
    $files[] = createTestVideo(sys_get_temp_dir() . '/test_video_small.mp4', 1);

    // Medium video
    $files[] = createTestVideo(sys_get_temp_dir() . '/test_video_medium.mp4', 5);

    // Large video
    $files[] = createTestVideo(sys_get_temp_dir() . '/test_video_large.mp4', 10);

    $successCount = array_sum($files);
    $totalCount = count($files);

    echo "\n📊 Summary:\n";
    echo "   Created: $successCount/$totalCount files\n";

    if ($successCount === $totalCount) {
        echo "✅ All test files created successfully!\n";
    } else {
        echo "⚠️  Some files failed to create\n";
    }

    return $successCount === $totalCount;
}

// Command line usage
if (php_sapi_name() === 'cli') {
    echo "🖼️  Test File Generator\n";
    echo "=====================\n";

    $args = $argv ?? [];

    if (count($args) < 2) {
        echo "Usage: php create_test_image.php [command]\n";
        echo "\nCommands:\n";
        echo "  image [width] [height] [output_path] [text]  - Create a test image\n";
        echo "  video [output_path] [size_mb]                - Create a test video\n";
        echo "  multiple                                       - Create multiple test files\n";
        echo "  help                                          - Show this help\n";
        echo "\nExamples:\n";
        echo "  php create_test_image.php image 800 600\n";
        echo "  php create_test_image.php video /tmp/test.mp4 5\n";
        echo "  php create_test_image.php multiple\n";
        exit(1);
    }

    $command = $args[1];

    switch ($command) {
        case 'image':
            $width = isset($args[2]) ? (int)$args[2] : 800;
            $height = isset($args[3]) ? (int)$args[3] : 600;
            $outputPath = isset($args[4]) ? $args[4] : null;
            $text = isset($args[5]) ? $args[5] : null;

            createTestImage($width, $height, $outputPath, $text);
            break;

        case 'video':
            $outputPath = isset($args[2]) ? $args[2] : null;
            $sizeMB = isset($args[3]) ? (int)$args[3] : 1;

            createTestVideo($outputPath, $sizeMB);
            break;

        case 'multiple':
            createMultipleTestFiles();
            break;

        case 'help':
            echo "🖼️  Test File Generator Help\n";
            echo "===========================\n";
            echo "This utility helps create test files for upload testing.\n\n";
            echo "Supported formats:\n";
            echo "  - JPEG images (using GD extension)\n";
            echo "  - Fake MP4 video files\n\n";
            echo "Requirements:\n";
            echo "  - PHP GD extension for image creation\n";
            echo "  - Write permissions to temp directory\n\n";
            break;

        default:
            echo "❌ Unknown command: $command\n";
            echo "Use 'php create_test_image.php help' for usage information.\n";
            exit(1);
    }
}
